package com.example.dreamweaver

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.dreamweaver.DefaultCharacterFranchises
import com.example.dreamweaver.DefaultStoryModes
import com.example.dreamweaver.service.StoryGeneratorService
import com.example.dreamweaver.service.StoryResult
import com.example.dreamweaver.ui.theme.DreamWeaverTheme
import kotlinx.coroutines.delay

class MainActivity : ComponentActivity() {
    
    private val storyGenerator = StoryGeneratorService()
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DreamWeaverApp()
        }
    }
    
    @Composable
    fun DreamWeaverApp() {
        var isDarkMode by remember { mutableStateOf(false) }
        
        DreamWeaverTheme(darkTheme = isDarkMode) {
            Surface(
                modifier = Modifier.fillMaxSize(),
                color = MaterialTheme.colorScheme.background
            ) {
                val navController = rememberNavController()
                
                // App state
                var selectedCharacters by remember { mutableStateOf(listOf<String>()) }
                var customCharacters by remember { mutableStateOf("") }
                var manualShow by remember { mutableStateOf("") }
                var childNames by remember { mutableStateOf(listOf("")) }
                var selectedMode by remember { mutableStateOf("Playful") }
                var holidayName by remember { mutableStateOf("") }
                var generatedStory by remember { mutableStateOf("") }
                var isGenerating by remember { mutableStateOf(false) }
                var currentStep by remember { mutableStateOf("welcome") }
                var apiKey by remember { mutableStateOf("") }
                var storyWarning by remember { mutableStateOf<String?>(null) }
                var isAiGenerated by remember { mutableStateOf(false) }
                
                NavHost(
                    navController = navController,
                    startDestination = "welcome"
                ) {
                    composable("welcome") {
                        WelcomeScreen(
                            isDarkMode = isDarkMode,
                            onToggleDarkMode = { isDarkMode = !isDarkMode },
                            onCreateStory = {
                                navController.navigate("character_input")
                            },
                            storyModes = DefaultStoryModes
                        )
                    }
                    
                    composable("character_input") {
                        CharacterInputScreen(
                            isDarkMode = isDarkMode,
                            onToggleDarkMode = { isDarkMode = !isDarkMode },
                            onBack = { navController.popBackStack() },
                            popularCharacters = DefaultCharacterFranchises,
                            manualShow = manualShow,
                            onManualShowChange = { manualShow = it },
                            manualCharacters = customCharacters,
                            onManualCharactersChange = { customCharacters = it },
                            onContinue = { navController.navigate("customize") },
                            onQuickSelect = { franchise ->
                                manualShow = franchise.name
                                customCharacters = franchise.characters.joinToString(", ")
                                selectedCharacters = franchise.characters
                                navController.navigate("customize")
                            }
                        )
                    }
                    
                    composable("customize") {
                        CustomizeScreen(
                            isDarkMode = isDarkMode,
                            onToggleDarkMode = { isDarkMode = !isDarkMode },
                            selectedCharacters = selectedCharacters,
                            customCharacters = customCharacters,
                            childNames = childNames,
                            selectedMode = selectedMode,
                            holidayName = holidayName,
                            apiKey = apiKey,
                            onChildNamesUpdate = { childNames = it },
                            onModeSelect = { selectedMode = it },
                            onHolidayUpdate = { holidayName = it },
                            onApiKeyUpdate = { apiKey = it },
                            onBackClick = { navController.popBackStack() },
                            onCreateStoryClick = {
                                navController.navigate("generating")
                            }
                        )
                    }
                    
                    composable("generating") {
                        LaunchedEffect(Unit) {
                            isGenerating = true
                            currentStep = "characters"
                            delay(1000)
                            
                            currentStep = "setting"
                            delay(1000)
                            
                            currentStep = "generating"
                            
                            // Set API key if provided
                            if (apiKey.isNotBlank()) {
                                storyGenerator.setApiKey(apiKey)
                            }
                            
                            // Generate story
                            val charactersText = if (selectedCharacters.isNotEmpty()) {
                                selectedCharacters.joinToString(", ")
                            } else {
                                customCharacters
                            }
                            
                            val childNamesText = childNames.filter { it.isNotBlank() }.joinToString(" and ")
                            
                            when (val result = storyGenerator.generateStory(
                                childNames = childNamesText,
                                characters = charactersText,
                                mode = selectedMode,
                                holiday = if (selectedMode == "Holiday" && holidayName.isNotBlank()) holidayName else null
                            )) {
                                is StoryResult.Success -> {
                                    generatedStory = result.story
                                    storyWarning = result.warning
                                    isAiGenerated = result.isAiGenerated
                                }
                                is StoryResult.Error -> {
                                    // Fallback story
                                    generatedStory = "Once upon a time, there was a wonderful adventure waiting to be discovered..."
                                    storyWarning = "Story generation failed. Please try again."
                                    isAiGenerated = false
                                }
                            }
                            
                            delay(1000)
                            currentStep = "story"
                            isGenerating = false
                            
                            navController.navigate("story")
                        }
                        
                        GeneratingScreen(
                            isDarkMode = isDarkMode,
                            selectedMode = selectedMode,
                            storyModes = DefaultStoryModes,
                            childNames = childNames,
                            manualCharacters = if (selectedCharacters.isNotEmpty()) {
                                selectedCharacters.joinToString(", ")
                            } else {
                                customCharacters
                            },
                            holidayName = holidayName
                        )
                    }
                    
                    composable("story") {
                        StoryScreen(
                            isDarkMode = isDarkMode,
                            onToggleDarkMode = { isDarkMode = !isDarkMode },
                            story = generatedStory,
                            selectedCharacters = selectedCharacters,
                            customCharacters = customCharacters,
                            isAiGenerated = isAiGenerated,
                            warning = storyWarning,
                            onCreateAnotherClick = { 
                                // Clear warning but keep API key
                                storyWarning = null
                                navController.navigate("customize")
                            },
                            onStartOverClick = {
                                // Reset all state including API key
                                selectedCharacters = listOf()
                                customCharacters = ""
                                childNames = listOf("")
                                selectedMode = "Playful"
                                holidayName = ""
                                generatedStory = ""
                                apiKey = ""
                                storyWarning = null
                                isAiGenerated = false
                                navController.navigate("welcome") {
                                    popUpTo("welcome") { inclusive = true }
                                }
                            }
                        )
                    }
                }
            }
        }
    }
}
